# Default values for inventory-api
# This is a YAML-formatted file.

# Global settings
global:
  # Global image registry
  imageRegistry: ""
  # Global image pull secrets
  imagePullSecrets: []
  # Global storage class
  storageClass: ""

# Namespace configuration
namespace:
  create: true
  name: ""
  annotations:
    istio-injection: enabled

# Application name and namespace
nameOverride: ""
fullnameOverride: ""

# Image configuration
image:
  registry: registry.gitlab.com
  repository: your-org/inventory-api
  tag: "latest"
  pullPolicy: IfNotPresent
  # Override the image registry
  # registry: ""

# Image pull secrets
imagePullSecrets:
  - name: gitlab-registry-secret

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext: {}
  # fsGroup: 2000

# Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 50051
      targetPort: grpc
    - name: metrics
      port: 9090
      targetPort: metrics
      appProtocol: http

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: inventory-api.your-domain.com
      paths:
        - path: /
          pathType: Prefix
    - host: inventory-api-dev.your-domain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: inventory-api-tls
      hosts:
        - inventory-api.your-domain.com
        - inventory-api-dev.your-domain.com

# Deployment configuration
deployment:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

# Resources configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Autoscaling configuration (for backward compatibility)
autoscaling:
  enabled: false

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 2

# Health check configuration
healthCheck:
  livenessProbe:
    enabled: true
    path: /health/
    port: 8201
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    enabled: true
    path: /health/
    port: 8201
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Environment configuration
env:
  # Django settings
  DJANGO_SETTINGS_MODULE: "inventory.settings"
  DEBUG: "False"
  ALLOWED_HOSTS: "*"
  
  # Database settings
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "inventory_api"
  
  # Redis settings
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # Application settings
  APP_PORT: "8201"
  WORKERS: "4"

# Secrets configuration
secrets:
  # Django secret key (will be auto-generated if not provided)
  SECRET_KEY: ""
  # Database credentials
  DB_USER: "inventory_api"
  DB_PASSWORD: ""
  # Admin password
  DJANGO_ADMIN_PASSWORD: ""

# ConfigMap configuration
configMap:
  # Additional config data
  additionalData: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Additional volumes
volumes: []
# - name: config-volume
#   configMap:
#     name: {{ include "inventory-api.fullname" . }}-config

# Additional volume mounts
volumeMounts: []
# - name: config-volume
#   mountPath: /app/config

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Network policy
# Custom network policy
networkPolicy:
  enabled: true
  namespace: "inventory-api-gateway"
  ingressRules:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-traefik
      - podSelector:
          matchLabels:
            app: monitoring
      - ipBlock:
          cidr: 10.0.0.0/8
  egressRules: []

# Service monitor for Prometheus
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  port: http

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2
  maxUnavailable: 1

# Pod security policy
podSecurityPolicy:
  enabled: false
  annotations: {}
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'

# # Istio Gateway configuration
# istio:
#   gateway:
#     enabled: true
#     name: "inventory-api-gateway"
#     namespace: "istio-system"
#     hosts:
#       - "inventory-api.your-domain.com"
#       - "inventory-api-dev.your-domain.com"
#     tls:
#       mode: SIMPLE
#       credentialName: "inventory-api-tls-cert"
#     http:
#       redirectToHttps: true

istio:
  gateway:
    enabled: true
    namespace: "inventory-api-gateway"
    selector:
      istio: ingressgateway
    # hosts:
    #   - "api.example.com"
    #   - "inventory-api-dev.your-domain.com"
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - "api.example.com"
        tls:
          httpsRedirect: true
      - port:
          number: 443
          name: https
          protocol: HTTPS
        hosts:
          - "api.example.com"
        tls:
          mode: SIMPLE
          credentialName: wildcard-example-com
      - port:
          number: 15443
          name: tls-passthrough
          protocol: TLS
        hosts:
          - "mtls.example.com"
        tls:
          mode: PASSTHROUGH

  virtualService:
    enabled: true
    name: "inventory-api-vs"
    hosts:
      - "inventory-api.your-domain.com"
      - "inventory-api-dev.your-domain.com"
    gateways:
      - "istio-system/inventory-api-gateway"
    http:
      - match:
          - uri:
              prefix: "/"
        route:
          - destination:
              host: "inventory-api"
              port:
                number: 80
        timeout: 60s
        retries:
          attempts: 3
          perTryTimeout: 20s

# cert-manager Certificate configuration
certificate:
  enabled: true
  name: "inventory-api-tls-cert"
  namespace: "istio-system"
  secretName: "inventory-api-tls-cert"
  issuerRef:
    name: "letsencrypt-prod"
    kind: "ClusterIssuer"
  privateKey:
    size: 4096
  dnsNames:
    - "inventory-api.your-domain.com"
    - "inventory-api-dev.your-domain.com"
  commonName: "inventory-api.your-domain.com"
  usages:
    - digital signature
    - key encipherment 