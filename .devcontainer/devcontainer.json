{
    "name": "Inventory API Development",
    "dockerComposeFile": [
        "../docker-compose.yml",
        "docker-compose.yml"
    ],
    "service": "app",
    "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
    "shutdownAction": "stopCompose",
    "containerUser": "vscode",
    "remoteUser": "vscode",
    "features": {
        "ghcr.io/devcontainers/features/git:1": {},
        "ghcr.io/devcontainers/features/github-cli:1": {},
        "ghcr.io/devcontainers/features/docker-outside-of-docker:1": {},
        "ghcr.io/devcontainers/features/common-utils:2": {
            "installZsh": true,
            "configureZshAsDefaultShell": true,
            "installOhMyZsh": true,
            "upgradePackages": true,
            "username": "vscode",
            "userUid": "1000",
            "userGid": "1000"
        }
    },
    "customizations": {
        "vscode": {
            "extensions": [
                "ms-python.python",
                "ms-python.flake8",
                "ms-python.black-formatter",
                "ms-python.isort",
                "ms-python.mypy-type-checker",
                "ms-python.pylint",
                "bradlc.vscode-tailwindcss",
                "ms-vscode.vscode-json",
                "redhat.vscode-yaml",
                "ms-vscode-remote.remote-containers",
                "github.copilot",
                "github.copilot-chat",
                "ms-vscode.hexeditor",
                "streetsidesoftware.code-spell-checker",
                "humao.rest-client",
                "rangav.vscode-thunder-client",
                "ckolkman.vscode-postgres",
                "mtxr.sqltools",
                "mtxr.sqltools-driver-pg",
                "formulahendry.auto-rename-tag",
                "esbenp.prettier-vscode",
                "ms-vscode.vscode-typescript-next",
                "ms-ceintl.vscode-language-pack-zh-hant",
                "EditorConfig.EditorConfig",
                "dbaeumer.vscode-eslint",
                "njpwerner.autodocstring",
                "donjayamanne.githistory",
                "ms-azuretools.vscode-containers",
                "ms-azuretools.vscode-docker",
                "mhutchie.git-graph"
            ],
            "settings": {
                "python.defaultInterpreterPath": "/usr/bin/python",
                "python.linting.enabled": true,
                "python.linting.pylintEnabled": true,
                "python.linting.flake8Enabled": true,
                "python.formatting.provider": "black",
                "python.sortImports.path": "isort",
                "python.analysis.typeCheckingMode": "basic",
                "python.analysis.autoImportCompletions": true,
                "editor.formatOnSave": true,
                "editor.codeActionsOnSave": {
                    "source.organizeImports": true
                },
                "files.exclude": {
                    "**/__pycache__": true,
                    "**/*.pyc": true,
                    "**/.mypy_cache": true
                },
                "terminal.integrated.defaultProfile.linux": "zsh",
                "sqltools.connections": [
                    {
                        "name": "PostgreSQL Local",
                        "driver": "PostgreSQL",
                        "previewLimit": 50,
                        "server": "postgres",
                        "port": 5432,
                        // "database": "${POSTGRES_DB}",
                        // "username": "${POSTGRES_USER}",
                        // "password": "${POSTGRES_PASSWORD}"
                    }
                ],
                "http.proxy": "${localEnv:http_proxy}"
            }
        }
    },
    "forwardPorts": [8201, 5432, 8202],
    "portsAttributes": {
        "8201": {
            "label": "Django API",
            "onAutoForward": "notify"
        },
        "5432": {
            "label": "PostgreSQL"
        },
        "8202": {
            "label": "pgAdmin"
        }
    },
    "onCreateCommand": "echo 'Welcome to the Inventory API Development Container!' && echo 'Make sure to run migrations and start the server after setup.'",
    "postCreateCommand": {
        "init": "./entrypoint.sh && make reset",
    },
    "mounts": [
        "source=${localWorkspaceFolder},target=/workspaces/${localWorkspaceFolderBasename},type=bind,consistency=cached"
    ]
}