# Generated by Django 5.2.5 on 2025-08-20 10:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnsibleGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Ansible group name', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Group description')),
                ('is_special', models.BooleanField(default=False, help_text='Whether this is a special group (all, ungrouped)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=32)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BaremetalGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the baremetal group', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the group')),
                ('total_cpu', models.IntegerField(help_text='Total CPU capacity')),
                ('total_memory', models.IntegerField(help_text='Total memory capacity')),
                ('total_storage', models.IntegerField(help_text='Total storage capacity')),
                ('available_cpu', models.IntegerField(help_text='Available CPU capacity')),
                ('available_memory', models.IntegerField(help_text='Available memory capacity')),
                ('available_storage', models.IntegerField(help_text='Available storage capacity')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], help_text='Group status', max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BGPConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asn', models.PositiveIntegerField(help_text='Autonomous System Number')),
                ('peer_ip', models.GenericIPAddressField(help_text='BGP peer IP', protocol='IPv4')),
                ('local_ip', models.GenericIPAddressField(help_text='Local BGP IP', protocol='IPv4')),
                ('password', models.CharField(blank=True, max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Vendor brand, e.g., Dell, HPE, etc.', max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCenter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Data center identifier', max_length=32, unique=True)),
                ('old_system_id', models.CharField(blank=True, help_text='Identifier from legacy system', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fabrication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Fabrication identifier', max_length=32, unique=True)),
                ('old_system_id', models.CharField(blank=True, help_text='Identifier from legacy system', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='K8sCluster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('version', models.CharField(max_length=255)),
                ('scheduling_mode', models.CharField(choices=[('spread_rack', 'SpreadByRack'), ('spread_resource', 'SpreadByResource'), ('balanced', 'Balanced'), ('default', 'Default')], default='default', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Phase identifier', max_length=32, unique=True)),
                ('old_system_id', models.CharField(blank=True, help_text='Identifier from legacy system', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('po_number', models.CharField(help_text='PO number', max_length=64, unique=True)),
                ('vendor_name', models.CharField(help_text='Vendor name', max_length=255)),
                ('payment_terms', models.CharField(blank=True, help_text='Payment terms', max_length=128)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('issued_by', models.CharField(blank=True, help_text='Procurement staff name or ID', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequisition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pr_number', models.CharField(help_text='PR number', max_length=64, unique=True)),
                ('requested_by', models.CharField(help_text='Requester name or ID', max_length=100)),
                ('department', models.CharField(blank=True, help_text='Requesting department', max_length=100)),
                ('reason', models.TextField(blank=True, help_text='Purpose or justification for the requisition')),
                ('submit_date', models.DateField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Rack identifier', max_length=32, unique=True)),
                ('bgp_number', models.CharField(help_text='Associated BGP number', max_length=20, unique=True)),
                ('as_number', models.PositiveIntegerField(help_text='Autonomous System Number')),
                ('old_system_id', models.CharField(blank=True, help_text='Identifier from legacy system', max_length=100)),
                ('height_units', models.PositiveIntegerField(default=42, help_text='Total height units in the rack')),
                ('used_units', models.PositiveIntegerField(default=0, help_text='Number of units currently in use')),
                ('available_units', models.PositiveIntegerField(default=42, help_text='Number of units available')),
                ('power_capacity', models.DecimalField(decimal_places=2, default=0, help_text='Power capacity in kW', max_digits=8)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('full', 'Full')], default='active', help_text='Rack status', max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Room identifier', max_length=32, unique=True)),
                ('old_system_id', models.CharField(blank=True, help_text='Identifier from legacy system', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceMesh',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('cilium', 'Cilium'), ('istio', 'Istio'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error')], max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VirtualMachineSpecification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('generation', models.CharField(max_length=32)),
                ('required_cpu', models.IntegerField()),
                ('required_memory', models.IntegerField()),
                ('required_storage', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VLAN',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vlan_id', models.PositiveIntegerField(unique=True)),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VRF',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('route_distinguisher', models.CharField(max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account', models.CharField(blank=True, help_text='Unique account identifier', max_length=32, null=True, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], help_text='Account status', max_length=32)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(guardian.mixins.GuardianUserMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaremetalModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Model name, e.g., PowerEdge R740', max_length=100)),
                ('total_cpu', models.IntegerField(help_text='Total CPU capacity')),
                ('total_memory', models.IntegerField(help_text='Total memory capacity')),
                ('total_storage', models.IntegerField(help_text='Total storage capacity')),
                ('brand', models.ForeignKey(help_text='Server brand', on_delete=django.db.models.deletion.CASCADE, related_name='models', to='api.brand')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='K8sClusterPlugin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('version', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error')], max_length=64)),
                ('additional_info', models.JSONField(blank=True, null=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plugins', to='api.k8scluster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Baremetal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Server name', max_length=255)),
                ('serial_number', models.CharField(help_text='Unique serial number', max_length=255, unique=True)),
                ('room', models.CharField(blank=True, max_length=32)),
                ('unit', models.CharField(blank=True, max_length=32)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('retired', 'Retired')], max_length=32)),
                ('available_cpu', models.IntegerField()),
                ('available_memory', models.IntegerField()),
                ('available_storage', models.IntegerField()),
                ('old_system_id', models.CharField(blank=True, max_length=100)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='baremetals', to='api.baremetalgroup')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='baremetals', to='api.baremetalmodel')),
                ('data_center', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='baremetals', to='api.datacenter')),
                ('fabrication', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='baremetals', to='api.fabrication')),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='baremetals', to='api.phase')),
                ('po', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='baremetals', to='api.purchaseorder')),
                ('pr', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='baremetals', to='api.purchaserequisition')),
                ('rack', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='baremetals', to='api.rack')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='K8sClusterToServiceMesh',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('primary', 'Primary'), ('secondary', 'Secondary')], max_length=50)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_meshes', to='api.k8scluster')),
                ('service_mesh', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clusters', to='api.servicemesh')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='k8scluster',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='k8s_clusters', to='api.tenant'),
        ),
        migrations.CreateModel(
            name='BaremetalGroupTenantQuota',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cpu_quota_percentage', models.FloatField()),
                ('memory_quota', models.IntegerField()),
                ('storage_quota', models.IntegerField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_quotas', to='api.baremetalgroup')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_quotas', to='api.tenant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VirtualMachine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('control-plane', 'K8s Control Plane'), ('worker', 'K8s Worker'), ('management', 'Management'), ('other', 'Other')], default='other', max_length=50)),
                ('status', models.CharField(max_length=50)),
                ('baremetal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='virtual_machines', to='api.baremetal')),
                ('k8s_cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='virtual_machines', to='api.k8scluster')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='virtual_machines', to='api.tenant')),
                ('specification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='virtual_machines', to='api.virtualmachinespecification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BastionClusterAssociation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('k8s_cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bastion_machines', to='api.k8scluster')),
                ('bastion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_clusters', to='api.virtualmachine')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NetworkInterface',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.UUIDField()),
                ('name', models.CharField(help_text='Interface name, e.g., eth0', max_length=64)),
                ('mac_address', models.CharField(help_text='MAC address', max_length=32)),
                ('is_primary', models.BooleanField(default=False, help_text='Marks primary interface')),
                ('ipv4_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('ipv4_netmask', models.GenericIPAddressField(blank=True, help_text='IPv4 netmask', null=True, protocol='IPv4')),
                ('ipv6_address', models.GenericIPAddressField(blank=True, help_text='IPv6 address', null=True, protocol='IPv6')),
                ('ipv6_netmask', models.GenericIPAddressField(blank=True, help_text='IPv6 netmask', null=True, protocol='IPv6')),
                ('gateway', models.GenericIPAddressField(blank=True, help_text='Default gateway', null=True)),
                ('dns_servers', models.CharField(blank=True, help_text='Comma-separated list of DNS servers', max_length=255)),
                ('bgp_config', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.bgpconfig')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('vlan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.vlan')),
                ('vrf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.vrf')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnsibleGroupRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_relationships', to='api.ansiblegroup')),
                ('parent_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_relationships', to='api.ansiblegroup')),
            ],
            options={
                'verbose_name': 'Ansible Group Relationship',
                'verbose_name_plural': 'Ansible Group Relationships',
                'unique_together': {('parent_group', 'child_group')},
            },
        ),
        migrations.CreateModel(
            name='AnsibleGroupVariable',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(help_text='Variable name', max_length=255)),
                ('value', models.TextField(help_text='Variable value (can be JSON)')),
                ('value_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON'), ('list', 'List'), ('dict', 'Dictionary')], default='string', max_length=32)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='api.ansiblegroup')),
            ],
            options={
                'ordering': ['key'],
                'unique_together': {('group', 'key')},
            },
        ),
        migrations.CreateModel(
            name='AnsibleHost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.UUIDField()),
                ('host_vars', models.JSONField(blank=True, default=dict, help_text='Host-specific variables')),
                ('ansible_host', models.GenericIPAddressField(blank=True, help_text='Ansible connection IP', null=True)),
                ('ansible_port', models.PositiveIntegerField(default=22, help_text='SSH port')),
                ('ansible_user', models.CharField(default='root', help_text='SSH username', max_length=64)),
                ('ansible_ssh_private_key_file', models.CharField(blank=True, help_text='Path to SSH private key', max_length=255)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosts', to='api.ansiblegroup')),
            ],
            options={
                'verbose_name': 'Ansible Host',
                'verbose_name_plural': 'Ansible Hosts',
                'unique_together': {('group', 'content_type', 'object_id')},
            },
        ),
    ]
