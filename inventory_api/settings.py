"""
Django settings for inventory_api project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import secrets
from pathlib import Path

from dotenv import load_dotenv

# =============================================================================
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# =============================================================================
BASE_DIR = Path(__file__).resolve().parent.parent

# =============================================================================
# Environment Configuration
# =============================================================================
dotenv_path = BASE_DIR / ".env"
load_dotenv(dotenv_path)

# =============================================================================
# Security Settings
# =============================================================================
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", secrets.token_urlsafe(50))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "True") == "True"

ENABLE_HTTPS = os.getenv("ENABLE_HTTPS", "False") == "True"

# Host and CSRF Configuration
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost").split(",")
CSRF_TRUSTED_ORIGINS = os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS", "localhost").split(
    ","
)

# =============================================================================
# Application Definition
# =============================================================================
INSTALLED_APPS = [
    # Django built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "django_extensions",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "django_prometheus",
    "rest_framework",
    "rest_framework.authtoken",
    "guardian",
    "corsheaders",
    # Local apps
    "inventory_api.api",
]

MIDDLEWARE = [
    # Prometheus monitoring
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    # CORS handling
    "corsheaders.middleware.CorsMiddleware",
    # Django security and core middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Static files
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # Prometheus monitoring (end)
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "inventory_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "inventory_api.wsgi.application"

# =============================================================================
# Database Configuration
# =============================================================================
# Prefer PostgreSQL if environment variables are provided;
# otherwise use SQLite for local development and testing
if os.environ.get("POSTGRES_NAME"):
    DATABASES = {
        "default": {
            "ENGINE": "django_prometheus.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_NAME"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
            "PORT": os.environ.get("POSTGRES_PORT", "5432"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

# =============================================================================
# Password Validation
# =============================================================================
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# =============================================================================
# Internationalization
# =============================================================================
LANGUAGE_CODE = os.environ.get("DJANGO_LANGUAGE_CODE", "en-us")
TIME_ZONE = os.environ.get("DJANGO_TIME_ZONE", "UTC")
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
# 正式環境才會 collect 到這裡
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# 開發階段會從這些目錄中尋找 static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# =============================================================================
# Model Configuration
# =============================================================================
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "api.CustomUser"

# =============================================================================
# Authentication & Authorization
# =============================================================================
# API Authentication Configuration
# When True, API requires token authentication.
# When False, API allows anonymous access.
REQUIRE_API_AUTHENTICATION = (
    os.environ.get("REQUIRE_API_AUTHENTICATION", "True") == "True"
)

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # Default Django backend
    "guardian.backends.ObjectPermissionBackend",  # Object-level permissions
)

# Guardian Configuration
ANONYMOUS_USER_ID = -1
GUARDIAN_MONKEY_PATCH_USER = False

# URL Configuration
APPEND_SLASH = False  # Disable automatic trailing slash to avoid redirect errors

# =============================================================================
# Django REST Framework Configuration
# =============================================================================
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",  # For browsable API login
        "inventory_api.api.authentication.ConditionalTokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "inventory_api.api.permissions.HasPermissionForObject",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": int(os.environ.get("DRF_PAGE_SIZE", "10")),
    "DEFAULT_SCHEMA_CLASS": "inventory_api.schema.CustomAutoSchema",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    "UNAUTHENTICATED_USER": None,
}

# =============================================================================
# API Documentation (Spectacular)
# =============================================================================
SPECTACULAR_SETTINGS = {
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "SWAGGER_UI_SETTINGS": {"deepLinking": True, "persistAuthorization": True},
    "ENUM_GENERATE_CHOICE_NAMES": True,
}

# =============================================================================
# CORS Configuration
# =============================================================================
# CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins in development
# CORS_ALLOW_CREDENTIALS = True
# Allow localhost and 127.0.0.1 on any port for development
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://localhost:\d+$",
    r"^http://127.0.0.1:\d+$",
]

# Allow specific origins if configured via environment
if os.environ.get("CORS_ALLOWED_ORIGINS"):
    CORS_ALLOWED_ORIGINS = os.environ.get("CORS_ALLOWED_ORIGINS", "").split(",")

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]


# ================================
# Security Headers
# ================================
# # 若在反向代理或 LB 終止 TLS（最常見），請加這行讓 Django 知道上游已是 HTTPS
# # 並確保你的 proxy 有設定/傳遞 X-Forwarded-Proto: https
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # 若無代理可拿掉

if ENABLE_HTTPS:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = int(
        os.getenv("SECURE_HSTS_SECONDS", "31536000")
    )  # >= 1 year to preload
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# ================================
# Related to DEBUG (Development/Production)
# ================================
if not DEBUG:
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SESSION_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SAMESITE = "Lax"
else:
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = False
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SESSION_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SAMESITE = "Lax"
