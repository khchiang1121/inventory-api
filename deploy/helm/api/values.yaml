# Default values for inventory-api
# This is a YAML-formatted file.
#
# SECRETS AUTO-GENERATION:
# When secrets.create is set to true, the following fields will be automatically
# generated if left empty (""):
# - POSTGRES_PASSWORD: 32-character random alphanumeric password
# - DJANGO_SUPERUSER_PASSWORD: 32-character random alphanumeric password  
# - DJANGO_SECRET_KEY: 50-character random alphanumeric key
# - DJANGO_BACKDOOR_API_TOKEN: 32-character random alphanumeric token
# - PGADMIN_DEFAULT_PASSWORD: 32-character random alphanumeric password
#
# To use auto-generation, leave these fields empty in your values file.
# To use custom values, provide the actual passwords/keys.

# Global settings
global:
  # Global image registry
  imageRegistry: ""
  # Global image pull secrets
  imagePullSecrets: []
  # Global storage class
  storageClass: ""

# Application name and namespace
nameOverride: ""
fullnameOverride: ""

# Image configuration
image:
  registry: ""
  repository: khchiang1121/inventory-api
  tag: "latest"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets:
  - name: gitlab-registry-secret

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Rollout deployment when configmap changes
rolloutOnConfigmapChange:
  enabled: true

# Pod security context
podSecurityContext: {}
  # fsGroup: 2000

# Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: inventory-api.your-domain.com
      paths:
        - path: /
          pathType: Prefix
    - host: inventory-api-dev.your-domain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: inventory-api-tls
      hosts:
        - inventory-api.your-domain.com
        - inventory-api-dev.your-domain.com

# Deployment configuration
deployment:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

# Resources configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Horizontal Pod Autoscaler
hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Autoscaling configuration (for backward compatibility)
autoscaling:
  enabled: false

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 2
  maxUnavailable: 1

# Health check configuration
healthCheck:
  livenessProbe:
    enabled: true
    path: /health/
    port: 8201
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    enabled: true
    path: /health/
    port: 8201
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Secrets configuration
secrets:
  # Specifies whether a secret should be created
  create: false
  data: {}
    # # Database credentials
    # POSTGRES_USER: "admin"
    # # Database password - leave empty to auto-generate a secure 32-character password
    # POSTGRES_PASSWORD: ""
    # POSTGRES_NAME: "inventory-api"
    # POSTGRES_HOST: "postgres"
    # POSTGRES_PORT: "5432"

    # # Admin password
    # DJANGO_SUPERUSER_USERNAME: "admin"
    # DJANGO_SUPERUSER_EMAIL: "admin@example.com"
    # # Django superuser password - leave empty to auto-generate a secure 32-character password
    # DJANGO_SUPERUSER_PASSWORD: ""

    # # Django secret key - leave empty to auto-generate a secure 50-character key
    # DJANGO_SECRET_KEY: ""

    # # API token for backdoor access - leave empty to auto-generate, set to empty string to disable
    # DJANGO_BACKDOOR_API_TOKEN: ""

    # # PGAdmin settings
    # PGADMIN_DEFAULT_EMAIL: "admin@example.com"
    # # PGAdmin password - leave empty to auto-generate a secure 32-character password
    # PGADMIN_DEFAULT_PASSWORD: ""

vaultSecret:
  create: false
  spec:
    path: "secret/prod/inventory-api"
    type: Opaque
    keys: []
    isBinary: false
    reconcileStrategy: ""
    templates: {}

# ConfigMap configuration
configMap:
  create: false
  data: {}
    # PGAdmin settings
    # PGADMIN_CONFIG_SERVER_MODE: "True"

    # # Django settings
    # DJANGO_SETTINGS_MODULE: "inventory.settings"
    # DJANGO_DEBUG: "False"
    # DJANGO_ALLOWED_HOSTS: "*"
    # DJANGO_CSRF_TRUSTED_ORIGINS: "*"
    
    # # Application settings
    # DJANGO_APP_PORT: ""
    # DJANGO_WORKERS: ""

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Additional volumes
volumes: []
# - name: config-volume
#   configMap:
#     name: {{ include "inventory-api.fullname" . }}-config

# Additional volume mounts
volumeMounts: []
# - name: config-volume
#   mountPath: /app/config

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Network policy
# Custom network policy
networkPolicy:
  enabled: true
  namespace: "inventory-api-gateway"
  ingressRules:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-traefik
      - podSelector:
          matchLabels:
            app: monitoring
      - ipBlock:
          cidr: 10.0.0.0/8
  egressRules: []

# Service monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  port: http
  # Namespace selector configuration
  namespaceSelector:
    # Whether to enable namespace selector (allows monitoring across namespaces)
    enabled: false
    # Use default namespace (current release namespace) - set to true for simple setup
    useDefault: true
    # Custom namespace selector configuration (only used when useDefault is false)
    # You can use either matchNames or matchLabels
    config:
      # Example 1: Monitor specific namespaces by name
      matchNames:
        - default
        - monitoring
        - production
      # Example 2: Monitor namespaces with specific labels (uncomment to use)
      # matchLabels:
      #   environment: production
      #   monitoring: enabled

# Pod security policy
podSecurityPolicy:
  enabled: false
  annotations: {}
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'

# # Istio Gateway configuration
istio:
  gateway:
    enabled: false
    namespace: "inventory-api-gateway"
    selector:
      istio: ingressgateway
    # hosts:
    #   - "api.example.com"
    #   - "inventory-api-dev.your-domain.com"
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - "api.example.com"
        tls:
          httpsRedirect: true
      - port:
          number: 443
          name: https
          protocol: HTTPS
        hosts:
          - "api.example.com"
        tls:
          mode: SIMPLE
          credentialName: wildcard-example-com
      - port:
          number: 15443
          name: tls-passthrough
          protocol: TLS
        hosts:
          - "mtls.example.com"
        tls:
          mode: PASSTHROUGH

  virtualService:
    enabled: false
    name: "inventory-api-vs"
    hosts:
      - "inventory-api.your-domain.com"
      - "inventory-api-dev.your-domain.com"
    gateways:
      - "istio-system/inventory-api-gateway"
    http:
      - match:
          - uri:
              prefix: "/"
        route:
          - destination:
              host: "inventory-api"
              port:
                number: 80
        timeout: 60s
        retries:
          attempts: 3
          perTryTimeout: 20s

# cert-manager Certificate configuration
certificate:
  enabled: false
  name: "inventory-api-tls-cert"
  namespace: "istio-system"
  secretName: "inventory-api-tls-cert"
  issuerRef:
    name: "letsencrypt-prod"
    kind: "ClusterIssuer"
  privateKey:
    size: 4096
  dnsNames:
    - "inventory-api.your-domain.com"
    - "inventory-api-dev.your-domain.com"
  commonName: "inventory-api.your-domain.com"
  usages:
    - digital signature
    - key encipherment 
